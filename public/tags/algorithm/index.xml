<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Algorithm on GeekHouse | 不肥的肥羊</title>
    <link>https://geekhouse.top/tags/algorithm/</link>
    <description>Recent content in Algorithm on GeekHouse | 不肥的肥羊</description>
    <image>
      <url>https://geekhouse.top/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://geekhouse.top/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 14 May 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://geekhouse.top/tags/algorithm/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>位运算的算法应用</title>
      <link>https://geekhouse.top/posts/algorithm_bit/</link>
      <pubDate>Fri, 14 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://geekhouse.top/posts/algorithm_bit/</guid>
      <description>基本介绍 作为算法题的一个大类，位运算相关的题目常常出现在各大公司的面试/笔试题中，下面先说说位运算的基本原理。
位运算使得计算机可以直接对每个比特位进行计算，效率会非常的高。
在 JS 中，位运算会将操作数当作 32 位的二进制串进行计算，如果二进制串超过 32 位，则只保留最后的 32 位进行计算，如：
11100110111110100000000000000110000000000001 # 输入的二进制串 10100000000000000110000000000001 # 实际使用的二进制串 在 JS 中，位运算有 7 种运算符：
 按位与（a &amp;amp; b）：在 a, b 的位表示中，每一个对应的位都为 1 则返回 1，否则返回 0  # 15 &amp;amp; 9 -&amp;gt; 9 0000 0000 0000 0000 0000 0000 0000 1111 &amp;amp; 0000 0000 0000 0000 0000 0000 0000 1001 --------------------------------------- 0000 0000 0000 0000 0000 0000 0000 1001 按位或（a | b）：在 a, b 的位表示中，每一个对应的位，只要有一个为 1 则返回 1，否则返回 0  # 15 | 9 -&amp;gt; 15 0000 0000 0000 0000 0000 0000 0000 1111 | 0000 0000 0000 0000 0000 0000 0000 1001 --------------------------------------- 0000 0000 0000 0000 0000 0000 0000 1111 按位异或（a ^ b）：在 a, b 的位表示中，每一个对应的位，两个不相同则返回 1，相同则返回 0  # 15 ^ 9 -&amp;gt; 6 0000 0000 0000 0000 0000 0000 0000 1111 | 0000 0000 0000 0000 0000 0000 0000 1001 --------------------------------------- 0000 0000 0000 0000 0000 0000 0000 0110 按位非（~a）：反转被操作数的位，即将每一位的 0 转为 1，1 转为 0  # ~15 -&amp;gt; -16 ~ 0000 0000 0000 0000 0000 0000 0000 1111 --------------------------------------- 1111 1111 1111 1111 1111 1111 1111 0000 左移（a &amp;laquo; b）：将 a 的二进制串向左移动 b 位，右边移入 0  # 9 &amp;lt;&amp;lt; 2 -&amp;gt; 36 &amp;lt;&amp;lt; 0000 0000 0000 0000 0000 0000 0000 1001 --------------------------------------- 0000 0000 0000 0000 0000 0000 0010 0100 有符号右移（a &amp;raquo; b）：把 a 的二进制表示向右移动 b 位，向右被移出的位被丢弃，拷贝最左侧的位以填充左侧。这种右移由于保留最左侧的二进制位，因此可以保留数字原本的正负符号  # 9 &amp;gt;&amp;gt; 2 -&amp;gt; 2 &amp;gt;&amp;gt; 0000 0000 0000 0000 0000 0000 0000 1001 --------------------------------------- 0000 0000 0000 0000 0000 0000 0010 0010 # -9 &amp;gt;&amp;gt; 2 -&amp;gt; -3 &amp;gt;&amp;gt; 1111 1111 1111 1111 1111 1111 1111 0111 --------------------------------------- 1111 1111 1111 1111 1111 1111 1111 1101 无符号右移（a &amp;raquo;&amp;gt; b）：把 a 的二进制表示向右移动 b 位，向右被移出的位被丢弃，左边空出的位全部填充为 0。这种右移由于左侧直接补 0，因此生成的数字必然是非负数  # 19 &amp;gt;&amp;gt;&amp;gt; 2 -&amp;gt; 4 &amp;gt;&amp;gt;&amp;gt; 0000 0000 0000 0000 0000 0000 0001 0011 --------------------------------------- 0000 0000 0000 0000 0000 0000 0010 0010 # -19 &amp;gt;&amp;gt;&amp;gt; 2 -&amp;gt; 1073741819 &amp;gt;&amp;gt;&amp;gt; 1111 1111 1111 1111 1111 1111 1110 1101 --------------------------------------- 0011 1111 1111 1111 1111 1111 1111 0011 常用性质 在使用位运算技巧解的算法题中，有以下这些常用的性质：</description>
    </item>
    
    <item>
      <title>排序算法</title>
      <link>https://geekhouse.top/posts/algorithm_sort/</link>
      <pubDate>Sun, 29 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://geekhouse.top/posts/algorithm_sort/</guid>
      <description>前言 作为一个非计算机专业出身的渣渣小前端，算法是前端技能进阶路上一座绕不开的大山。曾经尝试到 leetcode 上开坑，然而发现做出一道题，要花上好几个小时的时间。后来搜了一些算法学习方法相关的文章，许多人都提到：算法需要先系统性的学习，再去做题。而我平时开发最常使用 JavaScript，因此选用《数据结构与算法 JavaScript 描述》一书作为入门书籍。
阅读这本书之后，我与 《JS家的排序算法》 作者有一个相同的感受：书里有很多小错误，不仅仅是在文字描述上，在代码中也有出现。但是不得不承认，这本书非常适合前端开发者的算法入门学习，原因是其内容足够简洁、基础，它简洁明了地解释了每种算法的原理，没有涉及优化，以及算法考察中的一些难点。所以，如果需要进阶学习，还是需要配合其他书籍食用。
这篇文章权当我学习算法过程中的笔记，就从算法中基础的类别：排序算法开始，有问题请大家指出，我会尽快修正，避免误导他人。
首先搭建一个简单的性能测试平台：
// 使用一个函数集合保存所有用于测试的排序算法 let funcs = { // 工具：交换数组元素  toolExch (a, lo, hi) { let temp = a[lo]; a[lo] = a[hi]; a[hi] = temp } } // 生成一个长度为 10000，数值为 0-99 之间的数组用于测试 // 注意：排序算法的性能往往与被排序数组的特性有关系 // 如重复数据的数量、数据大小的分布、数据整体的方差等 // 本文主要的方向还是说明各种排序算法的原理 // 因此直接生成一组随机数作为测试数据 let arr = Array.from({ length: 10000 }, v =&amp;gt; Math.floor(Math.random() * 100)) // 执行集合中所有函数 for (let key in funcs) { // 遇到有 tool 标记的函数判断为工具函数，跳过  if (!</description>
    </item>
    
  </channel>
</rss>
